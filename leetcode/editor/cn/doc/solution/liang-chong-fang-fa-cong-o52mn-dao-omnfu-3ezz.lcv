## 前置知识：滑动窗口

如果您不知道滑动窗口，推荐先看视频 [滑动窗口【基础算法精讲 03】](https://www.bilibili.com/video/BV1hd4y1r7Gq/)，并完成 [209. 长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/) 作为本题的铺垫，因为这两题都属于「最短型」滑动窗口。

## 什么是「涵盖」

看示例 1，$s$ 的子串 $\texttt{BANC}$ 中每个字母的出现次数，都**大于等于** $t=\texttt{ABC}$ 中每个字母的出现次数，这就叫**涵盖**。

## 滑动窗口怎么滑

原理和 209 题一样，按照视频中的做法，我们枚举 $s$ 子串的右端点 $\textit{right}$（子串最后一个字母的下标），如果子串涵盖 $t$，就不断移动左端点 $\textit{left}$ 直到不涵盖为止。在移动过程中更新最短子串的左右端点。

具体来说：

1. 初始化 $\textit{ansLeft}=-1,\ \textit{ansRight}=m$，用来记录最短子串的左右端点，其中 $m$ 是 $s$ 的长度。
2. 用一个哈希表（或者数组）$\textit{cntT}$ 统计 $t$ 中每个字母的出现次数。
3. 初始化 $\textit{left}=0$，以及一个空哈希表（或者数组）$\textit{cntS}$，用来统计 $s$ 子串中每个字母的出现次数。
4. 遍历 $s$，设当前枚举的子串右端点为 $\textit{right}$，把 $s[\textit{right}]$ 的出现次数加一。
5. 遍历 $\textit{cntS}$ 中的每个字母及其出现次数，如果出现次数都大于等于 $\textit{cntT}$ 中的字母出现次数：
   1. 如果 $\textit{right}-\textit{left} < \textit{ansRight} - \textit{ansLeft}$，说明我们找到了更短的子串，更新 $\textit{ansLeft} = \textit{left},\  \textit{ansRight} = \textit{right}$。
   2. 把 $s[\textit{left}]$ 的出现次数减一。
   3. 左端点右移，即 $\textit{left}$ 加一。
   4. 重复上述三步，直到 $\textit{cntS}$ 有字母的出现次数小于 $\textit{cntT}$ 中该字母的出现次数为止。
6. 最后，如果 $\textit{ansLeft}<0$，说明没有找到符合要求的子串，返回空字符串，否则返回下标 $\textit{ansLeft}$ 到下标 $\textit{ansRight}$ 之间的子串。

由于本题大写字母和小写字母都有，为了方便，代码实现时可以直接创建大小为 $128$ 的数组，保证所有 ASCII 字符都可以统计。

## 方法一

* [sol-Python3]

```py
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        ans_left, ans_right = -1, len(s)
        cnt_s = Counter()  # s 子串字母的出现次数
        cnt_t = Counter(t)  # t 中字母的出现次数

        left = 0
        for right, c in enumerate(s):  # 移动子串右端点
            cnt_s[c] += 1  # 右端点字母移入子串
            while cnt_s >= cnt_t:  # 涵盖
                if right - left < ans_right - ans_left:  # 找到更短的子串
                    ans_left, ans_right = left, right  # 记录此时的左右端点
                cnt_s[s[left]] -= 1  # 左端点字母移出子串
                left += 1
        return "" if ans_left < 0 else s[ans_left: ans_right + 1]
```

* [sol-Java]

```java
class Solution {
    public String minWindow(String S, String t) {
        char[] s = S.toCharArray();
        int m = s.length;
        int ansLeft = -1;
        int ansRight = m;
        int[] cntS = new int[128]; // s 子串字母的出现次数
        int[] cntT = new int[128]; // t 中字母的出现次数
        for (char c : t.toCharArray()) {
            cntT[c]++;
        }

        int left = 0;
        for (int right = 0; right < m; right++) { // 移动子串右端点
            cntS[s[right]]++; // 右端点字母移入子串
            while (isCovered(cntS, cntT)) { // 涵盖
                if (right - left < ansRight - ansLeft) { // 找到更短的子串
                    ansLeft = left; // 记录此时的左右端点
                    ansRight = right;
                }
                cntS[s[left]]--; // 左端点字母移出子串
                left++;
            }
        }
        return ansLeft < 0 ? "" : S.substring(ansLeft, ansRight + 1);
    }

    private boolean isCovered(int[] cntS, int[] cntT) {
        for (int i = 'A'; i <= 'Z'; i++) {
            if (cntS[i] < cntT[i]) {
                return false;
            }
        }
        for (int i = 'a'; i <= 'z'; i++) {
            if (cntS[i] < cntT[i]) {
                return false;
            }
        }
        return true;
    }
}
```

* [sol-C++]

```cpp
class Solution {
    bool is_covered(int cnt_s[], int cnt_t[]) {
        for (int i = 'A'; i <= 'Z'; i++) {
            if (cnt_s[i] < cnt_t[i]) {
                return false;
            }
        }
        for (int i = 'a'; i <= 'z'; i++) {
            if (cnt_s[i] < cnt_t[i]) {
                return false;
            }
        }
        return true;
    }

public:
    string minWindow(string s, string t) {
        int m = s.length();
        int ans_left = -1, ans_right = m;
        int cnt_s[128]{}; // s 子串字母的出现次数
        int cnt_t[128]{}; // t 中字母的出现次数
        for (char c : t) {
            cnt_t[c]++;
        }

        int left = 0;
        for (int right = 0; right < m; right++) { // 移动子串右端点
            cnt_s[s[right]]++; // 右端点字母移入子串
            while (is_covered(cnt_s, cnt_t)) { // 涵盖
                if (right - left < ans_right - ans_left) { // 找到更短的子串
                    ans_left = left; // 记录此时的左右端点
                    ans_right = right;
                }
                cnt_s[s[left]]--; // 左端点字母移出子串
                left++;
            }
        }
        return ans_left < 0 ? "" : s.substr(ans_left, ans_right - ans_left + 1);
    }
};
```

* [sol-C]

```c
bool is_covered(int cnt_s[], int cnt_t[]) {
    for (int i = 'A'; i <= 'Z'; i++) {
        if (cnt_s[i] < cnt_t[i]) {
            return false;
        }
    }
    for (int i = 'a'; i <= 'z'; i++) {
        if (cnt_s[i] < cnt_t[i]) {
            return false;
        }
    }
    return true;
}

char* minWindow(char* s, char* t) {
    int ans_left = -1, ans_right = INT_MAX / 2;
    int cnt_s[128] = {}; // s 子串字母的出现次数
    int cnt_t[128] = {}; // t 中字母的出现次数
    for (int i = 0; t[i]; i++) {
        cnt_t[t[i]]++;
    }

    int left = 0;
    for (int right = 0; s[right]; right++) { // 移动子串右端点
        cnt_s[s[right]]++; // 右端点字母移入子串
        while (is_covered(cnt_s, cnt_t)) { // 涵盖
            if (right - left < ans_right - ans_left) { // 找到更短的子串
                ans_left = left; // 记录此时的左右端点
                ans_right = right;
            }
            cnt_s[s[left]]--; // 左端点字母移出子串
            left++;
        }
    }

    if (ans_left < 0) {
        return "";
    }
    s[ans_right + 1] = '\0';
    return s + ans_left;
}
```

* [sol-Go]

```go
func isCovered(cntS, cntT []int) bool {
    for i := 'A'; i <= 'Z'; i++ {
        if cntS[i] < cntT[i] {
            return false
        }
    }
    for i := 'a'; i <= 'z'; i++ {
        if cntS[i] < cntT[i] {
            return false
        }
    }
    return true
}

func minWindow(s, t string) string {
    ansLeft, ansRight := -1, len(s)
    var cntS, cntT [128]int
    for _, c := range t {
        cntT[c]++
    }

    left := 0
    for right, c := range s { // 移动子串右端点
        cntS[c]++ // 右端点字母移入子串
        for isCovered(cntS[:], cntT[:]) { // 涵盖
            if right-left < ansRight-ansLeft { // 找到更短的子串
                ansLeft, ansRight = left, right // 记录此时的左右端点
            }
            cntS[s[left]]-- // 左端点字母移出子串
            left++
        }
    }
    if ansLeft < 0 {
        return ""
    }
    return s[ansLeft : ansRight+1]
}
```

* [sol-JavaScript]

```js
function isCovered(cntS, cntT) {
    for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
        if (cntS[i] < cntT[i]) {
            return false;
        }
    }
    for (let i = 'a'.charCodeAt(0); i <= 'z'.charCodeAt(0); i++) {
        if (cntS[i] < cntT[i]) {
            return false;
        }
    }
    return true;
}

var minWindow = function(s, t) {
    const m = s.length;
    let ansLeft = -1, ansRight = m;
    const cntS = Array(128).fill(0); // s 子串字母的出现次数
    const cntT = Array(128).fill(0); // t 中字母的出现次数
    for (const c of t) {
        cntT[c.codePointAt(0)]++;
    }

    let left = 0;
    for (let right = 0; right < m; right++) { // 移动子串右端点
        cntS[s[right].codePointAt(0)]++; // 右端点字母移入子串
        while (isCovered(cntS, cntT)) { // 涵盖
            if (right - left < ansRight - ansLeft) { // 找到更短的子串
                ansLeft = left; // 记录此时的左右端点
                ansRight = right;
            }
            cntS[s[left].codePointAt(0)]--; // 左端点字母移出子串
            left++;
        }
    }
    return ansLeft < 0 ? "" : s.substring(ansLeft, ansRight + 1);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn min_window(S: String, t: String) -> String {
        fn is_covered(cnt_s: &[i32; 128], cnt_t: &[i32; 128]) -> bool {
            for i in b'A'..=b'Z' {
                if cnt_s[i as usize] < cnt_t[i as usize] {
                    return false;
                }
            }
            for i in b'a'..=b'z' {
                if cnt_s[i as usize] < cnt_t[i as usize] {
                    return false;
                }
            }
            true
        }

        let s = S.as_bytes();
        let m = s.len();
        let mut ans_left = 0;
        let mut ans_right = m;
        let mut cnt_s = [0; 128]; // s 子串字母的出现次数
        let mut cnt_t = [0; 128]; // t 中字母的出现次数
        for c in t.bytes() {
            cnt_t[c as usize] += 1;
        }

        let mut left = 0;
        for (right, &c) in s.iter().enumerate() { // 移动子串右端点
            cnt_s[c as usize] += 1; // 右端点字母移入子串
            while is_covered(&cnt_s, &cnt_t) { // 涵盖
                if right - left < ans_right - ans_left { // 找到更短的子串
                    ans_left = left; // 记录此时的左右端点
                    ans_right = right;
                }
                cnt_s[s[left] as usize] -= 1; // 左端点字母移出子串
                left += 1;
            }
        }
        if ans_right < m {
            S[ans_left..=ans_right].to_string()
        } else {
            String::new()
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(|\Sigma|m+n)$，其中 $m$ 为 $\textit{s}$ 的长度，$n$ 为 $\textit{t}$ 的长度，$|\Sigma|$ 为字符集合的大小，本题字符均为英文字母，所以 $|\Sigma|=52$。注意 $\textit{left}$ 只会增加不会减少，$\textit{left}$ 每增加一次，我们就花费 $\mathcal{O}(|\Sigma|)$ 的时间。因为 $\textit{left}$ 至多增加 $m$ 次，所以二重循环的时间复杂度为 $\mathcal{O}(|\Sigma|m)$，再算上统计 $t$ 字母出现次数的时间 $\mathcal{O}(n)$，总的时间复杂度为 $\mathcal{O}(|\Sigma|m+n)$。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$。如果创建了大小为 $128$ 的数组，则 $|\Sigma|=128$。

## 方法二：优化

上面的代码每次都要花费 $\mathcal{O}(|\Sigma|)$ 的时间去判断是否涵盖，能不能优化到 $\mathcal{O}(1)$ 呢？

可以。用一个变量 $\textit{less}$ 维护目前子串中有 $\textit{less}$ 种字母的出现次数小于 $t$ 中字母的出现次数。

具体来说（注意下面算法中的 $\textit{less}$ 变量）：

1. 初始化 $\textit{ansLeft}=-1,\ \textit{ansRight}=m$，用来记录最短子串的左右端点，其中 $m$ 是 $s$ 的长度。
2. 用一个哈希表（或者数组）$\textit{cntT}$ 统计 $t$ 中每个字母的出现次数。
3. 初始化 $\textit{left}=0$，以及一个空哈希表（或者数组）$\textit{cntS}$，用来统计 $s$ 子串中每个字母的出现次数。
4. 初始化 $\textit{less}$ 为 $t$ 中的不同字母个数。
5. 遍历 $s$，设当前枚举的子串右端点为 $\textit{right}$，把字母 $c = s[\textit{right}]$ 的出现次数加一。加一后，如果 $\textit{cntS}[c] = \textit{cntT}[c]$，说明 $c$ 的出现次数满足要求，把 $\textit{less}$ 减一。
6. 如果 $\textit{less} = 0$，说明 $\textit{cntS}$ 中的每个字母及其出现次数都大于等于 $\textit{cntT}$ 中的字母出现次数，那么：
   1. 如果 $\textit{right}-\textit{left} < \textit{ansRight} - \textit{ansLeft}$，说明我们找到了更短的子串，更新 $\textit{ansLeft} = \textit{left},\  \textit{ansRight} = \textit{right}$。
   2. 把字母 $x = s[\textit{left}]$ 的出现次数减一。减一前，如果 $\textit{cntS}[x] = \textit{cntT}[x]$，说明 $x$ 的出现次数不满足要求，把 $\textit{less}$ 加一。
   3. 左端点右移，即 $\textit{left}$ 加一。
   4. 重复上述三步，直到 $\textit{less} > 0$，即 $\textit{cntS}$ 有字母的出现次数小于 $\textit{cntT}$ 中该字母的出现次数为止。
7. 最后，如果 $\textit{ansLeft}<0$，说明没有找到符合要求的子串，返回空字符串，否则返回下标 $\textit{ansLeft}$ 到下标 $\textit{ansRight}$ 之间的子串。

代码实现时，可以把 $\textit{cntS}$ 和 $\textit{cntT}$ 合并成一个 $\textit{cnt}$，定义

$$
\textit{cnt}[x] = \textit{cntT}[x] - \textit{cntS}[x]
$$

如果 $\textit{cnt}[x] = 0$，就意味着窗口内字母 $x$ 的出现次数和 $t$ 的一样多。

* [sol-Python3]

```py
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        ans_left, ans_right = -1, len(s)
        cnt = defaultdict(int)  # 比 Counter 更快
        for c in t:
            cnt[c] += 1
        less = len(cnt)  # 有 less 种字母的出现次数 < t 中的字母出现次数

        left = 0
        for right, c in enumerate(s):  # 移动子串右端点
            cnt[c] -= 1  # 右端点字母移入子串
            if cnt[c] == 0:
                # 原来窗口内 c 的出现次数比 t 的少，现在一样多
                less -= 1
            while less == 0:  # 涵盖：所有字母的出现次数都是 >=
                if right - left < ans_right - ans_left:  # 找到更短的子串
                    ans_left, ans_right = left, right  # 记录此时的左右端点
                x = s[left]  # 左端点字母
                if cnt[x] == 0:
                    # x 移出窗口之前，检查出现次数，
                    # 如果窗口内 x 的出现次数和 t 一样，
                    # 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                    less += 1
                cnt[x] += 1  # 左端点字母移出子串
                left += 1
        return "" if ans_left < 0 else s[ans_left: ans_right + 1]
```

* [sol-Java]

```java
class Solution {
    public String minWindow(String S, String t) {
        char[] s = S.toCharArray();
        int m = s.length;
        int ansLeft = -1;
        int ansRight = m;
        int[] cnt = new int[128];
        int less = 0;
        for (char c : t.toCharArray()) {
            if (cnt[c] == 0) {
                less++; // 有 less 种字母的出现次数 < t 中的字母出现次数
            }
            cnt[c]++;
        }

        int left = 0;
        for (int right = 0; right < m; right++) { // 移动子串右端点
            char c = s[right]; // 右端点字母
            cnt[c]--; // 右端点字母移入子串
            if (cnt[c] == 0) { 
                // 原来窗口内 c 的出现次数比 t 的少，现在一样多
                less--;
            }
            while (less == 0) { // 涵盖：所有字母的出现次数都是 >=
                if (right - left < ansRight - ansLeft) { // 找到更短的子串
                    ansLeft = left; // 记录此时的左右端点
                    ansRight = right;
                }
                char x = s[left]; // 左端点字母
                if (cnt[x] == 0) {
                    // x 移出窗口之前，检查出现次数，
                    // 如果窗口内 x 的出现次数和 t 一样，
                    // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                    less++;
                }
                cnt[x]++; // 左端点字母移出子串
                left++;
            }
        }
        return ansLeft < 0 ? "" : S.substring(ansLeft, ansRight + 1);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    string minWindow(string s, string t) {
        int m = s.length();
        int ans_left = -1, ans_right = m;
        int cnt[128]{};
        int less = 0;
        for (char c : t) {
            if (cnt[c] == 0) {
                less++; // 有 less 种字母的出现次数 < t 中的字母出现次数
            }
            cnt[c]++;
        }

        int left = 0;
        for (int right = 0; right < m; right++) { // 移动子串右端点
            char c = s[right]; // 右端点字母
            cnt[c]--; // 右端点字母移入子串
            if (cnt[c] == 0) {
                // 原来窗口内 c 的出现次数比 t 的少，现在一样多
                less--;
            }
            while (less == 0) { // 涵盖：所有字母的出现次数都是 >=
                if (right - left < ans_right - ans_left) { // 找到更短的子串
                    ans_left = left; // 记录此时的左右端点
                    ans_right = right;
                }
                char x = s[left]; // 左端点字母
                if (cnt[x] == 0) {
                    // x 移出窗口之前，检查出现次数，
                    // 如果窗口内 x 的出现次数和 t 一样，
                    // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                    less++;
                }
                cnt[x]++; // 左端点字母移出子串
                left++;
            }
        }
        return ans_left < 0 ? "" : s.substr(ans_left, ans_right - ans_left + 1);
    }
};
```

* [sol-C]

```c
char* minWindow(char* s, char* t) {
    int ans_left = -1, ans_right = INT_MAX / 2;
    int cnt[128] = {};
    int less = 0;
    for (int i = 0; t[i]; i++) {
         char c = t[i];
         if (cnt[c] == 0) {
             less++; // 有 less 种字母的出现次数 < t 中的字母出现次数
         }
         cnt[c]++;
    }

    int left = 0;
    for (int right = 0; s[right]; right++) { // 移动子串右端点
        char c = s[right]; // 右端点字母
        cnt[c]--; // 右端点字母移入子串
        if (cnt[c] == 0) {
            // 原来窗口内 c 的出现次数比 t 的少，现在一样多
            less--;
        }
        while (less == 0) { // 涵盖：所有字母的出现次数都是 >=
            if (right - left < ans_right - ans_left) { // 找到更短的子串
                ans_left = left; // 记录此时的左右端点
                ans_right = right;
            }
            char x = s[left]; // 左端点字母
            if (cnt[x] == 0) {
                // x 移出窗口之前，检查出现次数，
                // 如果窗口内 x 的出现次数和 t 一样，
                // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                less++;
            }
            cnt[x]++; // 左端点字母移出子串
            left++;
        }
    }

    if (ans_left < 0) {
        return "";
    } 
    s[ans_right + 1] = '\0';
    return s + ans_left;
}
```

* [sol-Go]

```go
func minWindow(s, t string) string {
    ansLeft, ansRight := -1, len(s)
    cnt := [128]int{}
    less := 0
    for _, c := range t {
        if cnt[c] == 0 {
            less++ // 有 less 种字母的出现次数 < t 中的字母出现次数
        }
        cnt[c]++
    }

    left := 0
    for right, c := range s { // 移动子串右端点
        cnt[c]-- // 右端点字母移入子串
        if cnt[c] == 0 {
            // 原来窗口内 c 的出现次数比 t 的少，现在一样多
            less--
        }
        for less == 0 { // 涵盖：所有字母的出现次数都是 >=
            if right-left < ansRight-ansLeft { // 找到更短的子串
                ansLeft, ansRight = left, right // 记录此时的左右端点
            }
            x := s[left] // 左端点字母
            if cnt[x] == 0 {
                // x 移出窗口之前，检查出现次数，
                // 如果窗口内 x 的出现次数和 t 一样，
                // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                less++
            }
            cnt[x]++ // 左端点字母移出子串
            left++
        }
    }
    if ansLeft < 0 {
        return ""
    }
    return s[ansLeft : ansRight+1]
}
```

* [sol-JavaScript]

```js
var minWindow = function(s, t) {
    const m = s.length;
    let ansLeft = -1, ansRight = m;
    const cnt = Array(128).fill(0);
    let less = 0;
    for (let c of t) {
        c = c.codePointAt(0);
        if (cnt[c] === 0) {
            less++; // 有 less 种字母的出现次数 < t 中的字母出现次数
        }
        cnt[c]++;
    }

    let left = 0;
    for (let right = 0; right < m; right++) { // 移动子串右端点
        const c = s[right].codePointAt(0); // 右端点字母
        cnt[c]--; // 右端点字母移入子串
        if (cnt[c] === 0) {
            // 原来窗口内 c 的出现次数比 t 的少，现在一样多
            less--;
        }
        while (less === 0) { // 涵盖：所有字母的出现次数都是 >=
            if (right - left < ansRight - ansLeft) { // 找到更短的子串
                ansLeft = left; // 记录此时的左右端点
                ansRight = right;
            }
            const x = s[left].codePointAt(0); // 左端点字母
            if (cnt[x] === 0) {
                // x 移出窗口之前，检查出现次数，
                // 如果窗口内 x 的出现次数和 t 一样，
                // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                less++;
            }
            cnt[x]++; // 左端点字母移出子串
            left++;
        }
    }
    return ansLeft < 0 ? "" : s.substring(ansLeft, ansRight + 1);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn min_window(S: String, t: String) -> String {
        let s = S.as_bytes();
        let m = s.len();
        let mut ans_left = 0;
        let mut ans_right = m;
        let mut cnt = [0; 128];
        let mut less = 0;
        for c in t.bytes() {
            let c = c as usize;
            if cnt[c] == 0 {
                less += 1; // 有 less 种字母的出现次数 < t 中的字母出现次数
            }
            cnt[c] += 1;
        }

        let mut left = 0;
        for (right, &c) in s.iter().enumerate() { // 移动子串右端点
            let c = c as usize;
            cnt[c] -= 1; // 右端点字母移入子串
            if cnt[c] == 0 {
                // 原来窗口内 c 的出现次数比 t 的少，现在一样多
                less -= 1;
            }
            while less == 0 { // 涵盖：所有字母的出现次数都是 >=
                if right - left < ans_right - ans_left { // 找到更短的子串
                    ans_left = left; // 记录此时的左右端点
                    ans_right = right;
                }
                let x = s[left] as usize; // 左端点字母
                if cnt[x] == 0 {
                    // x 移出窗口之前，检查出现次数，
                    // 如果窗口内 x 的出现次数和 t 一样，
                    // 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                    less += 1;
                }
                cnt[x] += 1; // 左端点字母移出子串
                left += 1;
            }
        }
        if ans_right < m {
            S[ans_left..=ans_right].to_string()
        } else {
            String::new()
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(m+n)$ 或 $\mathcal{O}(m+n+|\Sigma|)$，其中 $m$ 为 $\textit{s}$ 的长度，$n$ 为 $\textit{t}$ 的长度，$|\Sigma|=128$。注意 $\textit{left}$ 只会增加不会减少，二重循环的时间复杂度为 $\mathcal{O}(m)$。使用哈希表写法的时间复杂度为 $\mathcal{O}(m+n)$，数组写法的时间复杂度为 $\mathcal{O}(m+n+|\Sigma|)$。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$。无论 $m$ 和 $n$ 有多大，额外空间都不会超过 $\mathcal{O}(|\Sigma|)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

### 解题思路

此处撰写解题思路

### 代码

* golang

```golang
func combinationSum2(candidates []int, target int) [][]int {
    var res [][]int
    var path []int
    sort.Slice(candidates, func(i,j int)bool {
        return candidates[i] <candidates[j]
    })
    var backtracking func([]int, int, int, int,[]int)
    //used 建议用数组，不要用hash,太占用内存了
    var used = make([]int, len(candidates)) //1 同一层使用 2 同一枝用过
    backtracking = func(candidates []int, target, sum, index int, used []int) {
        if target < sum {
            return
        }
        if target == sum {
            var b = make([]int, len(path))
            copy(b, path)
            res = append(res,b )
            return
        }
        for i := index; i < len(candidates) && sum + candidates[i] <= target;i++ {
            if i > 0 && candidates[i] == candidates[i-1]&&used[i-1] == 1 {
                used[i]=1  //可能是连续多个一样的
                continue
            }
            sum += candidates[i]
            path =append(path,candidates[i])
            used[i] = 2
            backtracking(candidates, target,sum,i+1,used)
            used[i] = 1
            path = path[:len(path)-1]
            sum -= candidates[i]
        }
    }
    backtracking(candidates,target,0,0,used)
    return res
}
```


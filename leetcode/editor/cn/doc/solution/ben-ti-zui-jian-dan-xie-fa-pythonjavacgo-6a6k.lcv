从左到右遍历数组，**能种花就立刻种花**。

如何判断能否种花？由于「花不能种植在相邻的地块上」，如果要在下标 $i$ 处种花，需要满足 $\textit{flowerbed}[i-1],\textit{flowerbed}[i],\textit{flowerbed}[i+1]$ 均为 $0$。

每种一朵花，就把 $n$ 减一。如果最后 $n\le 0$，则返回 `true`，否则返回 `false`。

为了简化判断逻辑，可以在数组的开头和末尾各插入一个 $0$。

* [sol-Python3]

```py
class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        flowerbed = [0] + flowerbed + [0]
        for i in range(1, len(flowerbed) - 1):
            if flowerbed[i - 1] == 0 and flowerbed[i] == 0 and flowerbed[i + 1] == 0:
                flowerbed[i] = 1  # 种花！
                n -= 1
        return n <= 0
```

* [sol-Java]

```java
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int[] a = new int[flowerbed.length + 2];
        System.arraycopy(flowerbed, 0, a, 1, flowerbed.length);
        for (int i = 1; i < a.length - 1; i++) {
            if (a[i - 1] == 0 && a[i] == 0 && a[i + 1] == 0) {
                a[i] = 1; // 种花！
                n--;
            }
        }
        return n <= 0;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool canPlaceFlowers(vector<int> &flowerbed, int n) {
        flowerbed.insert(flowerbed.begin(), 0);
        flowerbed.push_back(0);
        for (int i = 1; i + 1 < flowerbed.size(); i++) {
            if (flowerbed[i - 1] == 0 && flowerbed[i] == 0 && flowerbed[i + 1] == 0) {
                flowerbed[i] = 1; // 种花！
                n--;
            }
        }
        return n <= 0;
    }
};
```

* [sol-Go]

```go
func canPlaceFlowers(flowerbed []int, n int) bool {
    flowerbed = append(append([]int{0}, flowerbed...), 0)
    for i := 1; i < len(flowerbed)-1; i++ {
        if flowerbed[i-1] == 0 && flowerbed[i] == 0 && flowerbed[i+1] == 0 {
            flowerbed[i] = 1 // 种花！
            n--
        }
    }
    return n <= 0
}
```

* [sol-JavaScript]

```js
var canPlaceFlowers = function (flowerbed, n) {
    flowerbed.unshift(0);
    flowerbed.push(0);
    for (let i = 1; i < flowerbed.length - 1; i++) {
        if (flowerbed[i - 1] === 0 && flowerbed[i] === 0 && flowerbed[i + 1] === 0) {
            flowerbed[i] = 1; // 种花！
            n--;
        }
    }
    return n <= 0;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn can_place_flowers(flowerbed: Vec<i32>, n: i32) -> bool {
        let mut a = vec![0; flowerbed.len() + 2];
        a[1..(flowerbed.len() + 1)].clone_from_slice(&flowerbed);
        let mut n = n;
        for i in 1..(a.len() - 1) {
            if a[i - 1] == 0 && a[i] == 0 && a[i + 1] == 0 {
                a[i] = 1; // 种花！
                n -= 1;
            }
        }
        n <= 0
    }
}
```

如果不想创建新数组/修改原数组，也可以这样写：

* [sol-Python3]

```py
class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        i, m = 0, len(flowerbed)
        while i < m:
            if (i == 0 or flowerbed[i - 1] == 0) and flowerbed[i] == 0 and (i == m - 1 or flowerbed[i + 1] == 0):
                n -= 1
                i += 2  # 下一个位置肯定不能种花，直接跳过
            else:
                i += 1
        return n <= 0
```

* [sol-Java]

```java
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int m = flowerbed.length;
        for (int i = 0; i < m; i++) {
            if ((i == 0 || flowerbed[i - 1] == 0) && flowerbed[i] == 0 && (i == m - 1 || flowerbed[i + 1] == 0)) {
                n--;
                i++; // 下一个位置肯定不能种花，直接跳过
            }
        }
        return n <= 0;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool canPlaceFlowers(vector<int> &flowerbed, int n) {
        int m = flowerbed.size();
        for (int i = 0; i < m; i++) {
            if ((i == 0 || flowerbed[i - 1] == 0) && flowerbed[i] == 0 && (i == m - 1 || flowerbed[i + 1] == 0)) {
                n--;
                i++; // 下一个位置肯定不能种花，直接跳过
            }
        }
        return n <= 0;
    }
};
```

* [sol-Go]

```go
func canPlaceFlowers(flowerbed []int, n int) bool {
    m := len(flowerbed)
    for i := 0; i < m; i++ {
        if (i == 0 || flowerbed[i-1] == 0) && flowerbed[i] == 0 && (i == m-1 || flowerbed[i+1] == 0) {
            n--
            i++ // 下一个位置肯定不能种花，直接跳过
        }
    }
    return n <= 0
}
```

* [sol-JavaScript]

```js
var canPlaceFlowers = function (flowerbed, n) {
    const m = flowerbed.length;
    for (let i = 0; i < m; i++) {
        if ((i === 0 || flowerbed[i - 1] === 0) && flowerbed[i] === 0 && (i === m - 1 || flowerbed[i + 1] === 0)) {
            n--;
            i++; // 下一个位置肯定不能种花，直接跳过
        }
    }
    return n <= 0;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn can_place_flowers(flowerbed: Vec<i32>, n: i32) -> bool {
        let m = flowerbed.len();
        let mut n = n;
        let mut i = 0;
        while i < m {
            if (i == 0 || flowerbed[i - 1] == 0) && flowerbed[i] == 0 && (i == m - 1 || flowerbed[i + 1] == 0) {
                n -= 1;
                i += 2; // 下一个位置肯定不能种花，直接跳过
            } else {
                i += 1;
            }
        }
        n <= 0
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{flowerbed}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

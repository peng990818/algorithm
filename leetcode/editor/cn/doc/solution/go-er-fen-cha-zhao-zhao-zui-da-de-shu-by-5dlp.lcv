### 解题思路

跟查找峰值的思路有点像，二分查找的依据是不断筛选上升段，直到找到最大值
如果中间元素比左边的大，说明从左到中间都处于上升段，且中间元素不满足返回条件的话，那么就继续在右半段查找就行了。反之，则在左半段查找。

### 代码

* golang

```golang
func findMin(nums []int) int {
    // i:=0
    // k:=1
    // for {
    //     if i==0&&nums[len(nums)-1]>=nums[0]{
    //         return nums[0]
    //     }
    //     if i+1<len(nums)&&nums[i+1]<nums[i]{
    //         return nums[i+1]
    //     }else {
    //         if i+k<len(nums)&&nums[i+k]>=nums[i]{
    //             i+=k
    //         }else{
    //             i+=1
    //             k=1
    //         }
    //         k*=2
            
    //     }
    // }
    l:=len(nums)
    left,right:=0,len(nums)-1
    for left<=right{
        mid:=(left+right)/2
        if nums[(mid+1)%l]<=nums[mid]{
            return nums[(mid+1)%l]
        }else if nums[mid]>=nums[left]{
            left=mid+1
        }else{
            right=mid-1
        }
    }
    return 0
}
```


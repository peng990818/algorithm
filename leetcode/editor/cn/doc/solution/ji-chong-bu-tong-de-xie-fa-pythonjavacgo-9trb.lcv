设 $s$ 长度为 $n$。反转可以看成是交换 $s[0]$ 和 $s[n-1]$，交换 $s[1]$ 和 $s[n-2]$，交换 $s[2]$ 和 $s[n-3]$，依此类推。

第一种写法是初始化两个指针 $\textit{left}=0$ 和 $\textit{right}=n-1$ 表示需要交换的位置。每次交换后，将指针向中间移动，$\textit{left}$ 加一，$\textit{right}$ 减一。

什么时候退出循环呢？

- 如果 $n$ 是奇数，最终 $\textit{left}=\textit{right}=\left\lfloor\dfrac{n}{2}\right\rfloor$，无需交换。
- 如果 $n$ 是偶数，最后交换的是 $\textit{left}=\dfrac{n}{2}-1$ 以及 $\textit{right}=\dfrac{n}{2}$，然后各移动一位变成 $\textit{left}=\dfrac{n}{2},\ \textit{right}=\dfrac{n}{2}-1$，退出循环。
- 综上所述，当 $\textit{left}\ge \textit{right}$ 时，所有字符交换完毕，退出循环。

* [sol-Python3]

```py
class Solution:
    def reverseString(self, s: List[str]) -> None:
        left = 0
        right = len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
```

* [sol-Java]

```java
class Solution {
    public void reverseString(char[] s) {
        int n = s.length;
        for (int left = 0, right = n - 1; left < right; left++, right--) {
            char tmp = s[left];
            s[left] = s[right];
            s[right] = tmp;
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    void reverseString(vector<char>& s) {
        int n = s.size();
        for (int left = 0, right = n - 1; left < right; left++, right--) {
            swap(s[left], s[right]);
        }
    }
};
```

* [sol-C]

```c
void reverseString(char* s, int sSize) {
    for (int left = 0, right = sSize - 1; left < right; left++, right--) {
        char tmp = s[left];
        s[left] = s[right];
        s[right] = tmp;
    }
}
```

* [sol-Go]

```go
func reverseString(s []byte) {
    for left, right := 0, len(s)-1; left < right; left, right = left+1, right-1 {
        s[left], s[right] = s[right], s[left]
    }
}
```

* [sol-JavaScript]

```js
var reverseString = function(s) {
    const n = s.length;
    for (let left = 0, right = n - 1; left < right; left++, right--) {
        [s[left], s[right]] = [s[right], s[left]];
    }
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn reverse_string(s: &mut Vec<char>) {
        let n = s.len();
        let mut left = 0;
        let mut right = n - 1;
        while left < right {
            (s[left], s[right]) = (s[right], s[left]);
            left += 1;
            right -= 1;
        }
    }
}
```

由于 $\textit{left}+\textit{right}=n-1$ 恒成立，所以只需要用一个变量 $i$ 表示 $\textit{left}$，$n-1-i$ 就是 $\textit{right}$。

根据上面的讨论，循环直到 $i=\left\lfloor\dfrac{n}{2}\right\rfloor$ 时停止。

* [sol-Python3]

```py
class Solution:
    def reverseString(self, s: List[str]) -> None:
        for i in range(len(s) // 2):
            s[i], s[-i - 1] = s[-i - 1], s[i]
```

* [sol-Java]

```java
class Solution {
    public void reverseString(char[] s) {
        int n = s.length;
        for (int i = 0; i < n / 2; i++) {
            char tmp = s[i];
            s[i] = s[n - 1 - i];
            s[n - 1 - i] = tmp;
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    void reverseString(vector<char>& s) {
        int n = s.size();
        for (int i = 0; i < n / 2; i++) {
            swap(s[i], s[n - 1 - i]);
        }
    }
};
```

* [sol-C]

```c
void reverseString(char* s, int sSize) {
    for (int i = 0; i < sSize / 2; i++) {
        char tmp = s[i];
        s[i] = s[sSize - 1 - i];
        s[sSize - 1 - i] = tmp;
    }
}
```

* [sol-Go]

```go
func reverseString(s []byte) {
    for i, n := 0, len(s); i < n/2; i++ {
        s[i], s[n-1-i] = s[n-1-i], s[i]
    }
}
```

* [sol-JavaScript]

```js
var reverseString = function(s) {
    const n = s.length;
    for (let i = 0; i < n / 2; i++) {
        [s[i], s[n - 1 - i]] = [s[n - 1 - i], s[i]];
    }
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn reverse_string(s: &mut Vec<char>) {
        let n = s.len();
        for i in 0..n / 2 {
            (s[i], s[n - 1 - i]) = (s[n - 1 - i], s[i]);
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $s$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

#### 附

部分语言可以用一些语法糖或者标准库解决。

* [sol-Python3]

```py
class Solution:
    def reverseString(self, s: List[str]) -> None:
        # s[:] = s[::-1] 是切片赋值语法，表示用 s[::-1] 替换 s 中的元素。
        # 注意不能写成 s = s[::-1]，因为 s 只是形参，修改 s 不会影响函数外部传入的实参。
        # 注意这不是原地操作，需要 O(n) 额外空间。
        s[:] = s[::-1]
```

* [sol-C++]

```cpp
class Solution {
public:
    void reverseString(vector<char>& s) {
        ranges::reverse(s);
    }
};
```

* [sol-Go]

```go
func reverseString(s []byte) {
    slices.Reverse(s)
}
```

* [sol-JavaScript]

```js
var reverseString = function(s) {
    s.reverse();
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn reverse_string(s: &mut Vec<char>) {
        s.reverse()
    }
}
```

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
